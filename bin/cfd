#!/usr/bin/env bash

set -o pipefail

VERSION="0.0.8"

#
# Log <type> <msg>
#

log() {
  printf "  \033[36m%10s\033[0m : \e[32m%s\e[22m\033[0m\n" "$1" "$2"
}

#
# Exit with the given <msg ...>
#

abort() {
  printf "\n  \033[31mError: $@\033[0m\n\n" && exit 1
}

display_help() {
  cat <<-EOF

  Usage: cfd [options] [COMMAND] [args]

  Commands:

    cfd validate <template>                                            Validate a template
    cfd package <template> <output-template> <s3-bucket> <s3-prefix?>  Package a template for deployment
    cfd plan <stack> <template> <params?>                              Plan changes for a stack
    cfd apply <stack> <template> <params?>                             Apply changes to a stack
    cfd tail <stack> <delay?>                                          Tail latest stack events
    cfd outputs <stack>                                                Print stack outputs as JSON
    cfd exports <stack> <output-file?>                                 Exports stack outputs as CFD_OUT_Var=Value

  Options:

    -V, --version     Output current version of cfd
    -h, --help        Display help information
    -i, --ignore-env  Ignore CFD_VAR_ environment variables

  Aliases:

    v   validate
    k   package
    p   plan
    a   apply
    t   tail
    o   outputs
    e   exports

EOF
}

#
# Output cfd version.
#

display_version() {
  echo $VERSION && exit 0
}

#
# State
#

USE_CFD_VARS=true

#
# Get the status of a stack.
# _get_stack_status <stack-name>
#

_get_stack_status () {
  local stack_name=$1

  # Catch and forward exit code
  result=`aws cloudformation describe-stacks \
    --stack-name $stack_name \
    --query 'Stacks[0].StackStatus' \
    --output text \
    --max-items 1 \
    2>&1`

  exit_code=$?

  if [ "$exit_code" -eq 0 ]; then
    echo "$result"
  else
    exit $exit_code
  fi
}

#
# Get parameters for a stack deployment.
#

_get_stack_params() {
  local params_file=$1
  local params=()
  local result=

  if [ -f "$params_file" ]; then
    # Map json object from params file to list of <Key>=<Value> <Key>=<Value>
    params+=(`jq -r "to_entries|map(\"\(.key)=\(.value|tostring)\")|join(\" \")" $params_file`)
  fi

  if $USE_CFD_VARS; then
    # Match CFD_VAR_<Parameter> environment variable names and print as list of <Parameter>=<Value> <Parameter>=<Value>
    params+=(`env | awk -v ORS=" " -F= '{if($1 ~ /^CFD_VAR_/) {n = index($0, "="); $2 = substr($0, n+1); NF=2; gsub("^CFD_VAR_", "", $1); print $1 "=" $2}}'`)
  fi

  echo "${params[*]}"
}

#
# Validate a template file.
# cfd_validate <template>
#

cfd_validate() {
  test -z $1 && abort "template required"
  local template=$1

  result=`aws cloudformation validate-template \
    --template-body file://${template} \
    2>&1`

  if [ "$?" -eq 0 ]; then
    log validate "successful"
  else
    abort "$result"
  fi
}

#
# Package a stack for deployment
# cfd_package <template> <output-template> <s3-bucket> <s3-prefix?>
#

cfd_package() {
  test -z $1 && abort "template required"
  test -z $2 && abort "output template file required"
  test -z $3 && abort "s3-bucket required"
  local template=$1
  local output_template=$2
  local s3_bucket=$3
  local s3_prefix=${4:-}

  log package "packaging template '$template' to '$s3_bucket$([[ -n $s3_prefix ]] && echo "/$s3_prefix" || echo "")'"

  result=$(aws cloudformation package \
      --template-file "$template" \
      --output-template-file "$output_template" \
      --s3-bucket "$s3_bucket" \
      $([[ -n $s3_prefix ]] && echo "--s3-prefix $s3_prefix" || echo "") \
      2>&1)

  if [ "$?" -eq 0 ]; then
    log package "successful"
  else
    abort "$result"
  fi
}

#
# Plan changes for a stack using a change set.
# cfd_plan <stack-name> <template> <params-file?>
#

cfd_plan() {
  test -z $1 && abort "stack name required"
  test -z $2 && abort "template required"
  local stack_name=$1
  local template=$2
  local params_file=${3:-}
  local params=

  params=`_get_stack_params $params_file`

  log plan "params: $params"

  result=`aws cloudformation deploy \
    --stack-name "$stack_name" \
    --template-file "$template" \
    $([[ -n $params ]] && echo "--parameter-overrides $params" || echo "") \
    --capabilities CAPABILITY_IAM \
    --no-fail-on-empty-changeset \
    --no-execute-changeset \
    2>&1`

  if [ "$?" -eq 0 ]; then
    last_line=`echo "$result" | tail -n1`

    if [[ ! "$last_line" =~ "No changes to deploy" ]]; then
      log plan "`$last_line | jq '.Changes[]'`"
    else
      log plan "$last_line" && exit 0
    fi
  else
    abort "$result"
  fi
}

#
# Apply changes to a stack using a change set.
# cfd_apply <stack-name> <template> <params-file?>
#

cfd_apply() {
  test -z $1 && abort "stack name required"
  test -z $2 && abort "template required"
  local stack_name=$1
  local template=$2
  local params_file=${3:-}
  local log=`mktemp`
  local params=
  local pid=

  params=`_get_stack_params $params_file`

  log plan "params: $params"

  # Execute deploy in background process
  aws cloudformation deploy \
    --stack-name "$stack_name" \
    --template-file "$template" \
    $([[ -n $params ]] && echo "--parameter-overrides $params" || echo "") \
    --capabilities CAPABILITY_IAM \
    --no-fail-on-empty-changeset \
    > >(tee "$log") 2>&1 &

  pid=$!

  log apply "watching pid: $pid"

  # Exit process after change-set has been applied
  while kill -0 $pid > /dev/null 2>&1; do
    if fgrep "Waiting for stack create" "$log" > /dev/null; then
      log apply "killing pid: $pid"

      kill $pid

      break
    fi

    sleep 1
  done
}

#
# Tail the latest stack events.
# cfd_tail <stack-name>
#

cfd_tail() {
  test -z $1 && abort "stack name required"
  local stack_name=$1
  local delay=${2:-3}
  local last_event
  local last_event_id
  local stack_status

  stack_status=`_get_stack_status $stack_name`

  if [ "$?" -ne 0 ]; then
    abort "failed to get stack status"
  fi

  if [[ "$stack_status" == *_COMPLETE ]] \
    || [[ "$stack_status" == *_FAILED ]]; then
    log tail "no changes to tail"

    return
  fi

  until \
    [[ "$stack_status" == *_COMPLETE ]] \
    || [[ "$stack_status" == *_FAILED ]]; do
    last_event=`aws cloudformation describe-stack-events \
      --stack $stack_name \
      --query 'StackEvents[].{ EventId: EventId, LogicalResourceId: LogicalResourceId, ResourceType: ResourceType, ResourceStatus: ResourceStatus, Timestamp: Timestamp }' \
      --max-items 1 | jq .[0]`

    if [ "$?" -ne 0 ]; then
      abort "failed to get stack events"
    fi

    event_id=`echo "$last_event" | jq -r .EventId`

    if [ "$event_id" != "$last_event_id" ]; then
      last_event_id=$event_id
      details=`echo $last_event | jq -r '.Timestamp + " - " + .ResourceStatus + " - " + .ResourceType + " - " +  .LogicalResourceId'`

      log tail "$details"
    fi

    sleep $delay

    stack_status=`_get_stack_status $stack_name`

    if [ "$?" -ne 0 ]; then
      abort "failed to get stack status"
    fi
  done

  if [[ "$stack_status" == *_FAILED ]]; then
    abort "failed with status: $stack_status"
  elif [ "$stack_status" = "ROLLBACK_COMPLETE" ] \
    || [ "$stack_status" = "UPDATE_ROLLBACK_COMPLETE" ]; then
    abort "rollback occurred"
  elif [ "$stack_status" = "CREATE_COMPLETE" ]; then
    log tail "create successful"
  elif [ "$stack_status" = "UPDATE_COMPLETE" ]; then
    log tail "update successful"
  elif [ "$stack_status" = "DELETE_COMPLETE" ]; then
    log tail "delete successful"
  else
    abort "unsupported status: $stack_status"
  fi
}

#
# Get the outputs for a stack.
# cfd_outputs <stack-name>
#

cfd_outputs() {
  test -z $1 && abort "stack name required"
  local stack_name=$1
  local outputs=

  result=`aws cloudformation describe-stacks \
    --stack-name $stack_name \
    --query 'Stacks[0].Outputs' \
    --max-items 1 \
    2>&1`

  if [ "$?" -eq 0 ]; then
    outputs=`echo $result | jq -r 'reduce .[] as $i ({}; .[$i.OutputKey] = $i.OutputValue)'`

    echo "$outputs"
  else
    abort "$result"
  fi
}

#
# Exports the outputs of a stack.
# cfd_exports <stack-name> <output-file?>
#
cfd_exports() {
  test -z $1 && abort "stack name required"
  local stack_name=$1
  local output_file=${2:-}

  result=`cfd_outputs $stack_name 2>&1`

  if [ "$?" -eq 0 ]; then
    # If we need to write to an env file
    if [ ! -z "$output_file" ]; then
      # Convert json key/value to CFOUT_KEY=VALUE syntax
      env_vars=`echo "$result" | jq -r "to_entries|map(\"CFD_OUT_\(.key)=\(.value|tostring)\")|.[]"`

      echo "$env_vars" > $output_file

      # Print output_file and environment vars
      echo "Writing to file: ${output_file}"
      echo "$env_vars"
    else
      # Convert json key/value to export CFOUT_KEY=VALUE syntax
      env_vars=`echo "$result" | jq -r "to_entries|map(\"export CFD_OUT_\(.key)=\(.value|tostring)\")|.[]"`

      eval "$env_vars" && echo "$env_vars"
    fi
  else
    echo "$result"
  fi
}

#
# Handle arguments.
#

if test $# -eq 0; then
  display_help
else
  while test $# -ne 0; do
    case $1 in
      -V|--version) display_version ;;
      -h|--help|help) display_help; exit ;;
      -i|--ignore-env) USE_CFD_VARS=false ;;
      v|validate) cfd_validate $2; exit ;;
      k|package) shift; cfd_package $@; exit ;;
      p|plan) shift; cfd_plan $@; exit ;;
      a|apply) shift; cfd_apply $@; exit ;;
      t|tail) shift; cfd_tail $@; exit ;;
      o|outputs) cfd_outputs $2; exit ;;
      e|exports) shift; cfd_exports $@; exit ;;
      *) display_help; exit ;;
    esac
    shift
  done
fi
